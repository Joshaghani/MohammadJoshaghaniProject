// Generated by Dagger (https://dagger.dev).
package com.test.myproject.presentation.base;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.test.myproject.data.database.repository.LoginRepository;
import com.test.myproject.data.database.repository.RegisterRepository;
import com.test.myproject.data.database.room.AppDatabase;
import com.test.myproject.data.database.room.entities.PersonDao;
import com.test.myproject.data.managers.LoginService;
import com.test.myproject.data.managers.MainService;
import com.test.myproject.data.managers.RegisterService;
import com.test.myproject.data.managers.SplashService;
import com.test.myproject.presentation.activity.MainActivity;
import com.test.myproject.presentation.di.AppModule;
import com.test.myproject.presentation.di.AppModule_ProvidesApiKtorFactory;
import com.test.myproject.presentation.di.AppModule_ProvidesAppDatabaseFactory;
import com.test.myproject.presentation.di.AppModule_ProvidesDaoPersonFactory;
import com.test.myproject.presentation.di.modules.LoginModule;
import com.test.myproject.presentation.di.modules.LoginModule_ProvidesApiFactory;
import com.test.myproject.presentation.di.modules.LoginModule_ProvidesLoginStateFactory;
import com.test.myproject.presentation.di.modules.LoginModule_ProvidesRepositoryFactory;
import com.test.myproject.presentation.di.modules.MainModule;
import com.test.myproject.presentation.di.modules.MainModule_ProvidesApiFactory;
import com.test.myproject.presentation.di.modules.RegisterModule;
import com.test.myproject.presentation.di.modules.RegisterModule_ProvidesApiFactory;
import com.test.myproject.presentation.di.modules.RegisterModule_ProvidesRepositoryFactory;
import com.test.myproject.presentation.di.modules.SplashModule;
import com.test.myproject.presentation.di.modules.SplashModule_ProvidesApiFactory;
import com.test.myproject.presentation.screens.login.LoginScreenViewModel;
import com.test.myproject.presentation.screens.login.LoginScreenViewModel_Factory;
import com.test.myproject.presentation.screens.login.LoginScreenViewModel_HiltModules_KeyModule_ProvideFactory;
import com.test.myproject.presentation.screens.login.LoginScreenViewModel_MembersInjector;
import com.test.myproject.presentation.screens.main.MainScreenViewModel;
import com.test.myproject.presentation.screens.main.MainScreenViewModel_Factory;
import com.test.myproject.presentation.screens.main.MainScreenViewModel_HiltModules_KeyModule_ProvideFactory;
import com.test.myproject.presentation.screens.main.MainScreenViewModel_MembersInjector;
import com.test.myproject.presentation.screens.register.RegisterScreenViewModel;
import com.test.myproject.presentation.screens.register.RegisterScreenViewModel_Factory;
import com.test.myproject.presentation.screens.register.RegisterScreenViewModel_HiltModules_KeyModule_ProvideFactory;
import com.test.myproject.presentation.screens.register.RegisterScreenViewModel_MembersInjector;
import com.test.myproject.presentation.screens.splash.SplashScreenViewModel;
import com.test.myproject.presentation.screens.splash.SplashScreenViewModel_HiltModules_KeyModule_ProvideFactory;
import com.test.myproject.presentation.utilities.LoginState;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.managers.SavedStateHandleHolder;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import io.ktor.client.HttpClient;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerIApplication_HiltComponents_SingletonC {
  private DaggerIApplication_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private AppModule appModule;

    private ApplicationContextModule applicationContextModule;

    private LoginModule loginModule;

    private MainModule mainModule;

    private RegisterModule registerModule;

    private SplashModule splashModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder loginModule(LoginModule loginModule) {
      this.loginModule = Preconditions.checkNotNull(loginModule);
      return this;
    }

    public Builder mainModule(MainModule mainModule) {
      this.mainModule = Preconditions.checkNotNull(mainModule);
      return this;
    }

    public Builder registerModule(RegisterModule registerModule) {
      this.registerModule = Preconditions.checkNotNull(registerModule);
      return this;
    }

    public Builder splashModule(SplashModule splashModule) {
      this.splashModule = Preconditions.checkNotNull(splashModule);
      return this;
    }

    public IApplication_HiltComponents.SingletonC build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (loginModule == null) {
        this.loginModule = new LoginModule();
      }
      if (mainModule == null) {
        this.mainModule = new MainModule();
      }
      if (registerModule == null) {
        this.registerModule = new RegisterModule();
      }
      if (splashModule == null) {
        this.splashModule = new SplashModule();
      }
      return new SingletonCImpl(appModule, applicationContextModule, loginModule, mainModule, registerModule, splashModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements IApplication_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private SavedStateHandleHolder savedStateHandleHolder;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ActivityRetainedCBuilder savedStateHandleHolder(
        SavedStateHandleHolder savedStateHandleHolder) {
      this.savedStateHandleHolder = Preconditions.checkNotNull(savedStateHandleHolder);
      return this;
    }

    @Override
    public IApplication_HiltComponents.ActivityRetainedC build() {
      Preconditions.checkBuilderRequirement(savedStateHandleHolder, SavedStateHandleHolder.class);
      return new ActivityRetainedCImpl(singletonCImpl, savedStateHandleHolder);
    }
  }

  private static final class ActivityCBuilder implements IApplication_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public IApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements IApplication_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public IApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements IApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public IApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements IApplication_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public IApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements IApplication_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public IApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements IApplication_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public IApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends IApplication_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends IApplication_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends IApplication_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends IApplication_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(4).add(LoginScreenViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MainScreenViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(RegisterScreenViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SplashScreenViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends IApplication_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<LoginScreenViewModel> loginScreenViewModelProvider;

    private Provider<MainScreenViewModel> mainScreenViewModelProvider;

    private Provider<RegisterScreenViewModel> registerScreenViewModelProvider;

    private Provider<SplashScreenViewModel> splashScreenViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.loginScreenViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.mainScreenViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.registerScreenViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.splashScreenViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(4).put("com.test.myproject.presentation.screens.login.LoginScreenViewModel", ((Provider) loginScreenViewModelProvider)).put("com.test.myproject.presentation.screens.main.MainScreenViewModel", ((Provider) mainScreenViewModelProvider)).put("com.test.myproject.presentation.screens.register.RegisterScreenViewModel", ((Provider) registerScreenViewModelProvider)).put("com.test.myproject.presentation.screens.splash.SplashScreenViewModel", ((Provider) splashScreenViewModelProvider)).build();
    }

    @Override
    public Map<String, Object> getHiltViewModelAssistedMap() {
      return Collections.<String, Object>emptyMap();
    }

    private LoginScreenViewModel injectLoginScreenViewModel(LoginScreenViewModel instance) {
      LoginScreenViewModel_MembersInjector.injectLoginState(instance, singletonCImpl.providesLoginStateProvider.get());
      return instance;
    }

    private MainScreenViewModel injectMainScreenViewModel(MainScreenViewModel instance) {
      MainScreenViewModel_MembersInjector.injectLoginState(instance, singletonCImpl.providesLoginStateProvider.get());
      return instance;
    }

    private RegisterScreenViewModel injectRegisterScreenViewModel(
        RegisterScreenViewModel instance) {
      RegisterScreenViewModel_MembersInjector.injectLoginState(instance, singletonCImpl.providesLoginStateProvider.get());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.test.myproject.presentation.screens.login.LoginScreenViewModel 
          return (T) viewModelCImpl.injectLoginScreenViewModel(LoginScreenViewModel_Factory.newInstance(singletonCImpl.providesRepositoryProvider.get(), singletonCImpl.providesApiProvider.get()));

          case 1: // com.test.myproject.presentation.screens.main.MainScreenViewModel 
          return (T) viewModelCImpl.injectMainScreenViewModel(MainScreenViewModel_Factory.newInstance(singletonCImpl.providesApiProvider2.get()));

          case 2: // com.test.myproject.presentation.screens.register.RegisterScreenViewModel 
          return (T) viewModelCImpl.injectRegisterScreenViewModel(RegisterScreenViewModel_Factory.newInstance(singletonCImpl.providesRepositoryProvider2.get(), singletonCImpl.providesApiProvider3.get()));

          case 3: // com.test.myproject.presentation.screens.splash.SplashScreenViewModel 
          return (T) new SplashScreenViewModel(singletonCImpl.providesApiProvider4.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends IApplication_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl,
        SavedStateHandleHolder savedStateHandleHolderParam) {
      this.singletonCImpl = singletonCImpl;

      initialize(savedStateHandleHolderParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandleHolder savedStateHandleHolderParam) {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends IApplication_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends IApplication_HiltComponents.SingletonC {
    private final LoginModule loginModule;

    private final AppModule appModule;

    private final ApplicationContextModule applicationContextModule;

    private final MainModule mainModule;

    private final RegisterModule registerModule;

    private final SplashModule splashModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<AppDatabase> providesAppDatabaseProvider;

    private Provider<PersonDao> providesDaoPersonProvider;

    private Provider<LoginRepository> providesRepositoryProvider;

    private Provider<HttpClient> providesApiKtorProvider;

    private Provider<LoginService> providesApiProvider;

    private Provider<LoginState> providesLoginStateProvider;

    private Provider<MainService> providesApiProvider2;

    private Provider<RegisterRepository> providesRepositoryProvider2;

    private Provider<RegisterService> providesApiProvider3;

    private Provider<SplashService> providesApiProvider4;

    private SingletonCImpl(AppModule appModuleParam,
        ApplicationContextModule applicationContextModuleParam, LoginModule loginModuleParam,
        MainModule mainModuleParam, RegisterModule registerModuleParam,
        SplashModule splashModuleParam) {
      this.loginModule = loginModuleParam;
      this.appModule = appModuleParam;
      this.applicationContextModule = applicationContextModuleParam;
      this.mainModule = mainModuleParam;
      this.registerModule = registerModuleParam;
      this.splashModule = splashModuleParam;
      initialize(appModuleParam, applicationContextModuleParam, loginModuleParam, mainModuleParam, registerModuleParam, splashModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final AppModule appModuleParam,
        final ApplicationContextModule applicationContextModuleParam,
        final LoginModule loginModuleParam, final MainModule mainModuleParam,
        final RegisterModule registerModuleParam, final SplashModule splashModuleParam) {
      this.providesAppDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<AppDatabase>(singletonCImpl, 2));
      this.providesDaoPersonProvider = DoubleCheck.provider(new SwitchingProvider<PersonDao>(singletonCImpl, 1));
      this.providesRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<LoginRepository>(singletonCImpl, 0));
      this.providesApiKtorProvider = DoubleCheck.provider(new SwitchingProvider<HttpClient>(singletonCImpl, 4));
      this.providesApiProvider = DoubleCheck.provider(new SwitchingProvider<LoginService>(singletonCImpl, 3));
      this.providesLoginStateProvider = DoubleCheck.provider(new SwitchingProvider<LoginState>(singletonCImpl, 5));
      this.providesApiProvider2 = DoubleCheck.provider(new SwitchingProvider<MainService>(singletonCImpl, 6));
      this.providesRepositoryProvider2 = DoubleCheck.provider(new SwitchingProvider<RegisterRepository>(singletonCImpl, 7));
      this.providesApiProvider3 = DoubleCheck.provider(new SwitchingProvider<RegisterService>(singletonCImpl, 8));
      this.providesApiProvider4 = DoubleCheck.provider(new SwitchingProvider<SplashService>(singletonCImpl, 9));
    }

    @Override
    public void injectIApplication(IApplication iApplication) {
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.test.myproject.data.database.repository.LoginRepository 
          return (T) LoginModule_ProvidesRepositoryFactory.providesRepository(singletonCImpl.loginModule, singletonCImpl.providesDaoPersonProvider.get());

          case 1: // com.test.myproject.data.database.room.entities.PersonDao 
          return (T) AppModule_ProvidesDaoPersonFactory.providesDaoPerson(singletonCImpl.appModule, singletonCImpl.providesAppDatabaseProvider.get());

          case 2: // com.test.myproject.data.database.room.AppDatabase 
          return (T) AppModule_ProvidesAppDatabaseFactory.providesAppDatabase(singletonCImpl.appModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 3: // com.test.myproject.data.managers.LoginService 
          return (T) LoginModule_ProvidesApiFactory.providesApi(singletonCImpl.loginModule, singletonCImpl.providesApiKtorProvider.get());

          case 4: // io.ktor.client.HttpClient 
          return (T) AppModule_ProvidesApiKtorFactory.providesApiKtor(singletonCImpl.appModule);

          case 5: // com.test.myproject.presentation.utilities.LoginState 
          return (T) LoginModule_ProvidesLoginStateFactory.providesLoginState(singletonCImpl.loginModule);

          case 6: // com.test.myproject.data.managers.MainService 
          return (T) MainModule_ProvidesApiFactory.providesApi(singletonCImpl.mainModule, singletonCImpl.providesApiKtorProvider.get());

          case 7: // com.test.myproject.data.database.repository.RegisterRepository 
          return (T) RegisterModule_ProvidesRepositoryFactory.providesRepository(singletonCImpl.registerModule, singletonCImpl.providesDaoPersonProvider.get());

          case 8: // com.test.myproject.data.managers.RegisterService 
          return (T) RegisterModule_ProvidesApiFactory.providesApi(singletonCImpl.registerModule, singletonCImpl.providesApiKtorProvider.get());

          case 9: // com.test.myproject.data.managers.SplashService 
          return (T) SplashModule_ProvidesApiFactory.providesApi(singletonCImpl.splashModule, singletonCImpl.providesApiKtorProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
