// Generated by Dagger (https://dagger.dev).
package com.test.myproject.presentation.screens.main;

import com.test.myproject.data.managers.MainService;
import com.test.myproject.presentation.utilities.LoginState;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class MainScreenViewModel_Factory implements Factory<MainScreenViewModel> {
  private final Provider<MainService> serviceProvider;

  private final Provider<LoginState> loginStateProvider;

  public MainScreenViewModel_Factory(Provider<MainService> serviceProvider,
      Provider<LoginState> loginStateProvider) {
    this.serviceProvider = serviceProvider;
    this.loginStateProvider = loginStateProvider;
  }

  @Override
  public MainScreenViewModel get() {
    MainScreenViewModel instance = newInstance(serviceProvider.get());
    MainScreenViewModel_MembersInjector.injectLoginState(instance, loginStateProvider.get());
    return instance;
  }

  public static MainScreenViewModel_Factory create(Provider<MainService> serviceProvider,
      Provider<LoginState> loginStateProvider) {
    return new MainScreenViewModel_Factory(serviceProvider, loginStateProvider);
  }

  public static MainScreenViewModel newInstance(MainService service) {
    return new MainScreenViewModel(service);
  }
}
