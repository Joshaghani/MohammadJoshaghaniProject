// Generated by Dagger (https://dagger.dev).
package com.test.myproject.presentation.di.modules;

import com.test.myproject.data.database.repository.LoginRepository;
import com.test.myproject.data.database.room.entities.PersonDao;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class LoginModule_ProvidesRepositoryFactory implements Factory<LoginRepository> {
  private final LoginModule module;

  private final Provider<PersonDao> daoProvider;

  public LoginModule_ProvidesRepositoryFactory(LoginModule module,
      Provider<PersonDao> daoProvider) {
    this.module = module;
    this.daoProvider = daoProvider;
  }

  @Override
  public LoginRepository get() {
    return providesRepository(module, daoProvider.get());
  }

  public static LoginModule_ProvidesRepositoryFactory create(LoginModule module,
      Provider<PersonDao> daoProvider) {
    return new LoginModule_ProvidesRepositoryFactory(module, daoProvider);
  }

  public static LoginRepository providesRepository(LoginModule instance, PersonDao dao) {
    return Preconditions.checkNotNullFromProvides(instance.providesRepository(dao));
  }
}
