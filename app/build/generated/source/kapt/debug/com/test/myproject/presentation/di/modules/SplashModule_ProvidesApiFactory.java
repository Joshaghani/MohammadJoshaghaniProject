// Generated by Dagger (https://dagger.dev).
package com.test.myproject.presentation.di.modules;

import com.test.myproject.data.managers.SplashService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import io.ktor.client.HttpClient;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class SplashModule_ProvidesApiFactory implements Factory<SplashService> {
  private final SplashModule module;

  private final Provider<HttpClient> clientProvider;

  public SplashModule_ProvidesApiFactory(SplashModule module, Provider<HttpClient> clientProvider) {
    this.module = module;
    this.clientProvider = clientProvider;
  }

  @Override
  public SplashService get() {
    return providesApi(module, clientProvider.get());
  }

  public static SplashModule_ProvidesApiFactory create(SplashModule module,
      Provider<HttpClient> clientProvider) {
    return new SplashModule_ProvidesApiFactory(module, clientProvider);
  }

  public static SplashService providesApi(SplashModule instance, HttpClient client) {
    return Preconditions.checkNotNullFromProvides(instance.providesApi(client));
  }
}
