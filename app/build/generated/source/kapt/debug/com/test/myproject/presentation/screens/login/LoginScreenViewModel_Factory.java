// Generated by Dagger (https://dagger.dev).
package com.test.myproject.presentation.screens.login;

import com.test.myproject.data.database.repository.LoginRepository;
import com.test.myproject.data.managers.LoginService;
import com.test.myproject.presentation.utilities.LoginState;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class LoginScreenViewModel_Factory implements Factory<LoginScreenViewModel> {
  private final Provider<LoginRepository> repositoryProvider;

  private final Provider<LoginService> serviceProvider;

  private final Provider<LoginState> loginStateProvider;

  public LoginScreenViewModel_Factory(Provider<LoginRepository> repositoryProvider,
      Provider<LoginService> serviceProvider, Provider<LoginState> loginStateProvider) {
    this.repositoryProvider = repositoryProvider;
    this.serviceProvider = serviceProvider;
    this.loginStateProvider = loginStateProvider;
  }

  @Override
  public LoginScreenViewModel get() {
    LoginScreenViewModel instance = newInstance(repositoryProvider.get(), serviceProvider.get());
    LoginScreenViewModel_MembersInjector.injectLoginState(instance, loginStateProvider.get());
    return instance;
  }

  public static LoginScreenViewModel_Factory create(Provider<LoginRepository> repositoryProvider,
      Provider<LoginService> serviceProvider, Provider<LoginState> loginStateProvider) {
    return new LoginScreenViewModel_Factory(repositoryProvider, serviceProvider, loginStateProvider);
  }

  public static LoginScreenViewModel newInstance(LoginRepository repository, LoginService service) {
    return new LoginScreenViewModel(repository, service);
  }
}
